@page "/details/{Id}"

@using BlazorApp1.Data.Models;
@using BlazorApp1.Data.Services;
@using Newtonsoft.Json;
@using OcMundial.Data.Models;

<div class="row">
    <div class="col-12">
        <p>Details of @itemPrice.Title at Seacho-gu</p>
    </div>
</div>

<div class="row">
    @foreach (var item in itemPictures)
    {
        <div class="col-4">
            <img src="img/@item.PictureFileName" class="img-fluid" />
        </div>
    }
</div>

<div class="row mt-5">
    <div class="col-4">
        <p class="fs-6">Capacity: @itemPrice.Capacity Bedrooms: @itemPrice.NumberOfBedrooms  Beds: @itemPrice.NumberOfBeds Bathrooms: @itemPrice.NumberOfBathrooms</p>
        <p class="fs-5 fw-bold">Description</p>
        <p class="fs-6">@itemPrice.Description</p>
        <p class="fs-5 fw-bold">Host rules</p>
        <p class="fs-6">@itemPrice.HostRules</p>
    </div>
    <div class="col-4 ">
        <p class="fw-bolder text-center">Available Amenities:</p>
        @foreach (var item in listaAmenities)
        {
            <p class="text-center"> @item.Name</p>
        }
    </div>
    <div class="col-4 align-items-end">
        <p class="text-end">Check-in: dd/mm/yyyy</p>
        <p class="text-end">Check-out: dd/mm/yyyy</p>

        <div class="text-end">
            <span class="text-end">Reserve for</span>
            <input type="number" class="w-25" min="1" />
            <span>ppl</span>
        </div>


        <p class="mt-5 text-end fw-bold">Payable Amount: @itemPrice.Price USD</p>
        <div class="text-end">

            <button onclick="@GoPaginaPayment" class="p-2">Reserve Now</button>
            <span>@Status</span>
        </div>
    </div>
</div>
@code {


    [Parameter] public string Id { get; set; }
    public string Status { get; set; }
    public string Token { get; set; }


    [Inject]
    ItemService itemAmenitie { get; set; }

    [Inject]
    NavigationManager Navigation { get; set; }

    List<ItemAmenities> listaAmenities;
    ItemPrices itemPrice;
    List<Items> items;

    List<ItemPicture> itemPictures;

    public async Task CarregarPayment()
    {
        try
        {
            Payment payment = new Payment();
            payment.customer = "John Doe";
            payment.price = Convert.ToDouble(itemPrice.Price);

            payment.orderId = Id;
            payment.extraInfo = "LOREM IPSUM";
            payment.callBackUrl = "https://localhost:7134/details/" + Id;
            string json = JsonConvert.SerializeObject(payment);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            HttpClient client = new HttpClient();
            var resultado = await client.PostAsync("http://localhost:5000/Payment/PaymentToken", content);
            if (resultado.IsSuccessStatusCode)
            {
                string response = await resultado.Content.ReadAsStringAsync();
                Navigation.NavigateTo("http://localhost:5000/Payment/" + response);
            }
        }
        catch (Exception e)
        {

            throw;
        }

    }

    public void GoPaginaPayment()
    {

        CarregarPayment();

    }

    protected override Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        Status = query["status"];

        if (string.IsNullOrEmpty(Status))
        {
            listaAmenities = itemAmenitie.GetItemsAmenities(int.Parse(Id));
            itemPrice = itemAmenitie.GetItemPrice(int.Parse(Id));
            items = itemAmenitie.GetItems();
            itemPictures = itemAmenitie.GetItemPicture(int.Parse(Id));
            int id = int.Parse(Id);
            items = items.Where(x => x.Id == id).ToList();
        }
        else
        {
            string Token;
            Token = query["TrackId"];
            if (Status == "success")
            {
                Navigation.NavigateTo("/success/" + Token);
            }
            else
            {
                Navigation.NavigateTo("/fail/" + Token);
            }
        }




        return base.OnInitializedAsync();
    }
}
